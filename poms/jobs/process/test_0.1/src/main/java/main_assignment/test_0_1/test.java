// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main_assignment.test_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: test Purpose: Assignment<br>
 * Description: Main Assignment <br>
 * 
 * @author labyadav@deloitte.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class test implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (inputFile1 != null) {

				this.setProperty("inputFile1", inputFile1.toString());

			}

			if (inputFile2 != null) {

				this.setProperty("inputFile2", inputFile2.toString());

			}

			if (salesRejectedData != null) {

				this.setProperty("salesRejectedData", salesRejectedData.toString());

			}

			if (salesFilteredData != null) {

				this.setProperty("salesFilteredData", salesFilteredData.toString());

			}

			if (joinFilteredData != null) {

				this.setProperty("joinFilteredData", joinFilteredData.toString());

			}

			if (orderPriority_ML != null) {

				this.setProperty("orderPriority_ML", orderPriority_ML.toString());

			}

			if (orderPriority_HC != null) {

				this.setProperty("orderPriority_HC", orderPriority_HC.toString());

			}

			if (tempFile != null) {

				this.setProperty("tempFile", tempFile.toString());

			}

			if (filteredReject != null) {

				this.setProperty("filteredReject", filteredReject.toString());

			}

			if (lookupRejectFile != null) {

				this.setProperty("lookupRejectFile", lookupRejectFile.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String inputFile1;

		public String getInputFile1() {
			return this.inputFile1;
		}

		public String inputFile2;

		public String getInputFile2() {
			return this.inputFile2;
		}

		public String salesRejectedData;

		public String getSalesRejectedData() {
			return this.salesRejectedData;
		}

		public String salesFilteredData;

		public String getSalesFilteredData() {
			return this.salesFilteredData;
		}

		public String joinFilteredData;

		public String getJoinFilteredData() {
			return this.joinFilteredData;
		}

		public String orderPriority_ML;

		public String getOrderPriority_ML() {
			return this.orderPriority_ML;
		}

		public String orderPriority_HC;

		public String getOrderPriority_HC() {
			return this.orderPriority_HC;
		}

		public String tempFile;

		public String getTempFile() {
			return this.tempFile;
		}

		public String filteredReject;

		public String getFilteredReject() {
			return this.filteredReject;
		}

		public String lookupRejectFile;

		public String getLookupRejectFile() {
			return this.lookupRejectFile;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "test";
	private final String projectName = "MAIN_ASSIGNMENT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					test.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(test.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBufferOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBufferInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_3_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_3_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_3_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_4_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_4_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_4_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "postgres";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:lZLBSRFNrXm5S0E08TUpEm16kdptv2WbWsynv4uDBZGJ");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							globalMap.put("tDBConnection_1_ERROR_MESSAGE", e_tDBConnection_1.getMessage());
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				try {
					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("the end is near");

					globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
					globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");

				} catch (Exception | Error e_tDie_1) {
					globalMap.put("tDie_1_ERROR_MESSAGE", e_tDie_1.getMessage());
					logIgnoredError(
							String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1),
							e_tDie_1);
				}

				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 process_data_begin ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_begin ] stop
				 */

				/**
				 * [tDie_1 process_data_end ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filterSalesStruct implements routines.system.IPersistableRow<filterSalesStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filterSalesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class storeSalesDataStruct implements routines.system.IPersistableRow<storeSalesDataStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(storeSalesDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public String Order_Date;

		public String getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public String Ship_Date;

		public String getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readString(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// String

				writeString(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// String

				writeString(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + Order_Date);
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + Ship_Date);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				filterSalesStruct filterSales = new filterSalesStruct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				storeSalesDataStruct storeSalesData = new storeSalesDataStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(context.salesFilteredData)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("Region");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Country");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Item_Type");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_Channel");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Order_Priority");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Order_Date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Order_ID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Ship_Date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Units_Sold");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Unit_Price");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Unit_Cost");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(context.salesRejectedData)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("Region");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Country");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Item_Type");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Sales_Channel");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Order_Priority");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Order_Date");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Order_ID");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Ship_Date");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Units_Sold");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Unit_Price");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Unit_Cost");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("errorMessage");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "filterSales");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tBufferOutput_1 begin ] start
				 */

				ok_Hash.put("tBufferOutput_1", false);
				start_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				currentComponent = "tBufferOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "storeSalesData");
				}

				int tos_count_tBufferOutput_1 = 0;

				/**
				 * [tBufferOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				filterSalesStruct filterSales_tmp = new filterSalesStruct();
				storeSalesDataStruct storeSalesData_tmp = new storeSalesDataStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/labyadav/Desktop/HU IE/Week4/ETL Main Assignment/Sales data (Clean).csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/labyadav/Desktop/HU IE/Week4/ETL Main Assignment/Sales data (Clean).csv",
								"UTF-8", ",", "\n", false, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row2.Region = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.Country = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.Item_Type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row2.Sales_Channel = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row2.Order_Date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row2.Ship_Date = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.Unit_Cost = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								filterSales = null;
								storeSalesData = null;

// # Output table : 'filterSales'
								filterSales_tmp.Region = row2.Region;
								filterSales_tmp.Country = row2.Country;
								filterSales_tmp.Item_Type = row2.Item_Type;
								filterSales_tmp.Sales_Channel = row2.Sales_Channel;
								filterSales_tmp.Order_Priority = row2.Order_Priority;
								filterSales_tmp.Order_Date = TalendDate.parseDate("dd/MM/yyyy",
										routines.TalendDate.formatDate("dd/MM/yyyy",
												routines.TalendDate.parseDate("dd/MM/yy", row2.Order_Date)));
								filterSales_tmp.Order_ID = row2.Order_ID;
								filterSales_tmp.Ship_Date = TalendDate.parseDate("dd/MM/yyyy",
										routines.TalendDate.formatDate("dd/MM/yyyy",
												routines.TalendDate.parseDate("dd/MM/yy", row2.Ship_Date)));
								filterSales_tmp.Units_Sold = row2.Units_Sold;
								filterSales_tmp.Unit_Price = row2.Unit_Price;
								filterSales_tmp.Unit_Cost = row2.Unit_Cost;
								filterSales = filterSales_tmp;

// # Output table : 'storeSalesData'
								storeSalesData_tmp.Region = row2.Region;
								storeSalesData_tmp.Country = row2.Country;
								storeSalesData_tmp.Item_Type = row2.Item_Type;
								storeSalesData_tmp.Sales_Channel = row2.Sales_Channel;
								storeSalesData_tmp.Order_Priority = row2.Order_Priority;
								storeSalesData_tmp.Order_Date = TalendDate.parseDate("dd/MM/yyyy",
										routines.TalendDate.formatDate("dd/MM/yyyy",
												routines.TalendDate.parseDate("dd/MM/yy", row2.Order_Date)));
								storeSalesData_tmp.Order_ID = row2.Order_ID;
								storeSalesData_tmp.Ship_Date = TalendDate.parseDate("dd/MM/yyyy",
										routines.TalendDate.formatDate("dd/MM/yyyy",
												routines.TalendDate.parseDate("dd/MM/yy", row2.Ship_Date)));
								storeSalesData_tmp.Units_Sold = row2.Units_Sold;
								storeSalesData_tmp.Unit_Price = row2.Unit_Price;
								storeSalesData_tmp.Unit_Cost = row2.Unit_Cost;
								storeSalesData = storeSalesData_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "filterSales"
							if (filterSales != null) {
								row4 = null;

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "filterSales"

									);
								}

								row4 = null;
								row3 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches(
										(filterSales.Sales_Channel == null ? false
												: filterSales.Sales_Channel.matches("Online") == true),
										" Sales_Channel.matches(\"Online\") == true failed");
								ope_tFilterRow_1.matches((// code sample : use filterSales to define the condition.
// filterSales.columnName1.equals("foo") ||!(filterSales.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
								filterSales.Order_Date.after(TalendDate.parseDate("dd/MM/yyyy", "01/01/2012"))),
										"advanced condition failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row3 == null) {
										row3 = new row3Struct();
									}
									row3.Region = filterSales.Region;
									row3.Country = filterSales.Country;
									row3.Item_Type = filterSales.Item_Type;
									row3.Sales_Channel = filterSales.Sales_Channel;
									row3.Order_Priority = filterSales.Order_Priority;
									row3.Order_Date = filterSales.Order_Date;
									row3.Order_ID = filterSales.Order_ID;
									row3.Ship_Date = filterSales.Ship_Date;
									row3.Units_Sold = filterSales.Units_Sold;
									row3.Unit_Price = filterSales.Unit_Price;
									row3.Unit_Cost = filterSales.Unit_Cost;
									nb_line_ok_tFilterRow_1++;
								} else {
									if (row4 == null) {
										row4 = new row4Struct();
									}
									row4.Region = filterSales.Region;
									row4.Country = filterSales.Country;
									row4.Item_Type = filterSales.Item_Type;
									row4.Sales_Channel = filterSales.Sales_Channel;
									row4.Order_Priority = filterSales.Order_Priority;
									row4.Order_Date = filterSales.Order_Date;
									row4.Order_ID = filterSales.Order_ID;
									row4.Ship_Date = filterSales.Ship_Date;
									row4.Units_Sold = filterSales.Units_Sold;
									row4.Unit_Price = filterSales.Unit_Price;
									row4.Unit_Cost = filterSales.Unit_Cost;
									row4.errorMessage = ope_tFilterRow_1.getErrorMsg();
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row3"

										);
									}

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
									if (row3.Region != null) {
										sb_tFileOutputDelimited_1.append(row3.Region);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Country != null) {
										sb_tFileOutputDelimited_1.append(row3.Country);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Item_Type != null) {
										sb_tFileOutputDelimited_1.append(row3.Item_Type);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Sales_Channel != null) {
										sb_tFileOutputDelimited_1.append(row3.Sales_Channel);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Order_Priority != null) {
										sb_tFileOutputDelimited_1.append(row3.Order_Priority);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Order_Date != null) {
										sb_tFileOutputDelimited_1
												.append(FormatterUtils.format_Date(row3.Order_Date, "dd-MM-yyyy"));
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Order_ID != null) {
										sb_tFileOutputDelimited_1.append(row3.Order_ID);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Ship_Date != null) {
										sb_tFileOutputDelimited_1
												.append(FormatterUtils.format_Date(row3.Ship_Date, "dd-MM-yyyy"));
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Units_Sold != null) {
										sb_tFileOutputDelimited_1.append(row3.Units_Sold);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Unit_Price != null) {
										sb_tFileOutputDelimited_1.append(row3.Unit_Price);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.Unit_Cost != null) {
										sb_tFileOutputDelimited_1.append(row3.Unit_Cost);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_end ] stop
									 */

								} // End of branch "row3"

// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tFileOutputDelimited_2 main ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row4"

										);
									}

									StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
									if (row4.Region != null) {
										sb_tFileOutputDelimited_2.append(row4.Region);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Country != null) {
										sb_tFileOutputDelimited_2.append(row4.Country);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Item_Type != null) {
										sb_tFileOutputDelimited_2.append(row4.Item_Type);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Sales_Channel != null) {
										sb_tFileOutputDelimited_2.append(row4.Sales_Channel);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Order_Priority != null) {
										sb_tFileOutputDelimited_2.append(row4.Order_Priority);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Order_Date != null) {
										sb_tFileOutputDelimited_2
												.append(FormatterUtils.format_Date(row4.Order_Date, "dd-MM-yyyy"));
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Order_ID != null) {
										sb_tFileOutputDelimited_2.append(row4.Order_ID);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Ship_Date != null) {
										sb_tFileOutputDelimited_2
												.append(FormatterUtils.format_Date(row4.Ship_Date, "dd-MM-yyyy"));
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Units_Sold != null) {
										sb_tFileOutputDelimited_2.append(row4.Units_Sold);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Unit_Price != null) {
										sb_tFileOutputDelimited_2.append(row4.Unit_Price);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.Unit_Cost != null) {
										sb_tFileOutputDelimited_2.append(row4.Unit_Cost);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
									if (row4.errorMessage != null) {
										sb_tFileOutputDelimited_2.append(row4.errorMessage);
									}
									sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

									nb_line_tFileOutputDelimited_2++;
									resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

									outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

									tos_count_tFileOutputDelimited_2++;

									/**
									 * [tFileOutputDelimited_2 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_2 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									/**
									 * [tFileOutputDelimited_2 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_2 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									/**
									 * [tFileOutputDelimited_2 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

							} // End of branch "filterSales"

// Start of branch "storeSalesData"
							if (storeSalesData != null) {

								/**
								 * [tBufferOutput_1 main ] start
								 */

								currentComponent = "tBufferOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "storeSalesData"

									);
								}

								String[] row_tBufferOutput_1 = new String[] { "", "", "", "", "", "", "", "", "", "",
										"", };
								if (storeSalesData.Region != null) {

									row_tBufferOutput_1[0] = storeSalesData.Region;

								} else {
									row_tBufferOutput_1[0] = null;
								}
								if (storeSalesData.Country != null) {

									row_tBufferOutput_1[1] = storeSalesData.Country;

								} else {
									row_tBufferOutput_1[1] = null;
								}
								if (storeSalesData.Item_Type != null) {

									row_tBufferOutput_1[2] = storeSalesData.Item_Type;

								} else {
									row_tBufferOutput_1[2] = null;
								}
								if (storeSalesData.Sales_Channel != null) {

									row_tBufferOutput_1[3] = storeSalesData.Sales_Channel;

								} else {
									row_tBufferOutput_1[3] = null;
								}
								if (storeSalesData.Order_Priority != null) {

									row_tBufferOutput_1[4] = String.valueOf(storeSalesData.Order_Priority);

								} else {
									row_tBufferOutput_1[4] = null;
								}
								if (storeSalesData.Order_Date != null) {

									row_tBufferOutput_1[5] = FormatterUtils.format_Date(storeSalesData.Order_Date,
											"dd-MM-yyyy");

								} else {
									row_tBufferOutput_1[5] = null;
								}
								if (storeSalesData.Order_ID != null) {

									row_tBufferOutput_1[6] = String.valueOf(storeSalesData.Order_ID);

								} else {
									row_tBufferOutput_1[6] = null;
								}
								if (storeSalesData.Ship_Date != null) {

									row_tBufferOutput_1[7] = FormatterUtils.format_Date(storeSalesData.Ship_Date,
											"dd-MM-yyyy");

								} else {
									row_tBufferOutput_1[7] = null;
								}
								if (storeSalesData.Units_Sold != null) {

									row_tBufferOutput_1[8] = String.valueOf(storeSalesData.Units_Sold);

								} else {
									row_tBufferOutput_1[8] = null;
								}
								if (storeSalesData.Unit_Price != null) {

									row_tBufferOutput_1[9] = String.valueOf(storeSalesData.Unit_Price);

								} else {
									row_tBufferOutput_1[9] = null;
								}
								if (storeSalesData.Unit_Cost != null) {

									row_tBufferOutput_1[10] = String.valueOf(storeSalesData.Unit_Cost);

								} else {
									row_tBufferOutput_1[10] = null;
								}
								globalBuffer.add(row_tBufferOutput_1);

								tos_count_tBufferOutput_1++;

								/**
								 * [tBufferOutput_1 main ] stop
								 */

								/**
								 * [tBufferOutput_1 process_data_begin ] start
								 */

								currentComponent = "tBufferOutput_1";

								/**
								 * [tBufferOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tBufferOutput_1 process_data_end ] start
								 */

								currentComponent = "tBufferOutput_1";

								/**
								 * [tBufferOutput_1 process_data_end ] stop
								 */

							} // End of branch "storeSalesData"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/labyadav/Desktop/HU IE/Week4/ETL Main Assignment/Sales data (Clean).csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "filterSales");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tBufferOutput_1 end ] start
				 */

				currentComponent = "tBufferOutput_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "storeSalesData");
				}

				ok_Hash.put("tBufferOutput_1", true);
				end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tBufferInput_1Process(globalMap);

				/**
				 * [tBufferOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tBufferInput_1Struct
			implements routines.system.IPersistableRow<after_tBufferInput_1Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tBufferInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);

				row5Struct row5 = new row5Struct();
				row7Struct row7 = new row7Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(context.joinFilteredData)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("Region");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Country");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Item_Type");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Sales_Channel");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Order_Priority");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Order_Date");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Order_ID");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Ship_Date");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Units_Sold");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Unit_Price");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Unit_Cost");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Name");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(context.lookupRejectFile)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("Region");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Country");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Item_Type");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Sales_Channel");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Order_Priority");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Order_Date");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Order_ID");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Ship_Date");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Units_Sold");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Unit_Price");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Unit_Cost");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Name");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row6Struct, row6Struct> tHash_tJoin_1 = (java.util.Map<row6Struct, row6Struct>) globalMap
						.get("tHash_row6");

				class Util_tJoin_1 {
					row6Struct lookupValue = null;
					row6Struct row6HashKey = new row6Struct();

					public boolean isJoined(row5Struct mainRow) {
						row6HashKey.Order_Id = mainRow.Order_ID;

						row6HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row6HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[11];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						row5.Region = row_tBufferInput_1[0];

					}

					else {
						row5.Region = null;
					}
					if (1 < row_tBufferInput_1.length) {

						row5.Country = row_tBufferInput_1[1];

					}

					else {
						row5.Country = null;
					}
					if (2 < row_tBufferInput_1.length) {

						row5.Item_Type = row_tBufferInput_1[2];

					}

					else {
						row5.Item_Type = null;
					}
					if (3 < row_tBufferInput_1.length) {

						row5.Sales_Channel = row_tBufferInput_1[3];

					}

					else {
						row5.Sales_Channel = null;
					}
					if (4 < row_tBufferInput_1.length) {

						row5.Order_Priority = ParserUtils.parseTo_Character(row_tBufferInput_1[4]);

					}

					if (5 < row_tBufferInput_1.length) {

						row5.Order_Date = ParserUtils.parseTo_Date(row_tBufferInput_1[5], "dd-MM-yyyy");

					}

					else {
						row5.Order_Date = null;
					}
					if (6 < row_tBufferInput_1.length) {

						row5.Order_ID = ParserUtils.parseTo_Integer(row_tBufferInput_1[6]);

					}

					if (7 < row_tBufferInput_1.length) {

						row5.Ship_Date = ParserUtils.parseTo_Date(row_tBufferInput_1[7], "dd-MM-yyyy");

					}

					else {
						row5.Ship_Date = null;
					}
					if (8 < row_tBufferInput_1.length) {

						row5.Units_Sold = ParserUtils.parseTo_Integer(row_tBufferInput_1[8]);

					}

					if (9 < row_tBufferInput_1.length) {

						row5.Unit_Price = ParserUtils.parseTo_Float(row_tBufferInput_1[9]);

					}

					if (10 < row_tBufferInput_1.length) {

						row5.Unit_Cost = ParserUtils.parseTo_Float(row_tBufferInput_1[10]);

					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tBufferInput_1 process_data_begin ] start
					 */

					currentComponent = "tBufferInput_1";

					/**
					 * [tBufferInput_1 process_data_begin ] stop
					 */

					/**
					 * [tJoin_1 main ] start
					 */

					currentComponent = "tJoin_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row5"

						);
					}

					row7 = null;
					row11 = null;

					row7 = new row7Struct();
					row7.Region = row5.Region;
					row7.Country = row5.Country;
					row7.Item_Type = row5.Item_Type;
					row7.Sales_Channel = row5.Sales_Channel;
					row7.Order_Priority = row5.Order_Priority;
					row7.Order_Date = row5.Order_Date;
					row7.Order_ID = row5.Order_ID;
					row7.Ship_Date = row5.Ship_Date;
					row7.Units_Sold = row5.Units_Sold;
					row7.Unit_Price = row5.Unit_Price;
					row7.Unit_Cost = row5.Unit_Cost;

					row11 = new row11Struct();
					row11.Region = row5.Region;
					row11.Country = row5.Country;
					row11.Item_Type = row5.Item_Type;
					row11.Sales_Channel = row5.Sales_Channel;
					row11.Order_Priority = row5.Order_Priority;
					row11.Order_Date = row5.Order_Date;
					row11.Order_ID = row5.Order_ID;
					row11.Ship_Date = row5.Ship_Date;
					row11.Units_Sold = row5.Units_Sold;
					row11.Unit_Price = row5.Unit_Price;
					row11.Unit_Cost = row5.Unit_Cost;

					if (util_tJoin_1.isJoined(row5)) {
						row7.Name = util_tJoin_1.lookupValue.Name;
						row11 = null;
					}

					else {
						row7 = null;
					}
///////////////////////    			

					tos_count_tJoin_1++;

					/**
					 * [tJoin_1 main ] stop
					 */

					/**
					 * [tJoin_1 process_data_begin ] start
					 */

					currentComponent = "tJoin_1";

					/**
					 * [tJoin_1 process_data_begin ] stop
					 */
// Start of branch "row7"
					if (row7 != null) {

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row7.Region != null) {
							sb_tFileOutputDelimited_3.append(row7.Region);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Country != null) {
							sb_tFileOutputDelimited_3.append(row7.Country);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Item_Type != null) {
							sb_tFileOutputDelimited_3.append(row7.Item_Type);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Sales_Channel != null) {
							sb_tFileOutputDelimited_3.append(row7.Sales_Channel);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Order_Priority != null) {
							sb_tFileOutputDelimited_3.append(row7.Order_Priority);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Order_Date != null) {
							sb_tFileOutputDelimited_3.append(FormatterUtils.format_Date(row7.Order_Date, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Order_ID != null) {
							sb_tFileOutputDelimited_3.append(row7.Order_ID);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Ship_Date != null) {
							sb_tFileOutputDelimited_3.append(FormatterUtils.format_Date(row7.Ship_Date, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Units_Sold != null) {
							sb_tFileOutputDelimited_3.append(row7.Units_Sold);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Unit_Price != null) {
							sb_tFileOutputDelimited_3.append(row7.Unit_Price);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Unit_Cost != null) {
							sb_tFileOutputDelimited_3.append(row7.Unit_Cost);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.Name != null) {
							sb_tFileOutputDelimited_3.append(row7.Name);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

					} // End of branch "row7"

// Start of branch "row11"
					if (row11 != null) {

						/**
						 * [tFileOutputDelimited_6 main ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row11"

							);
						}

						StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
						if (row11.Region != null) {
							sb_tFileOutputDelimited_6.append(row11.Region);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Country != null) {
							sb_tFileOutputDelimited_6.append(row11.Country);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Item_Type != null) {
							sb_tFileOutputDelimited_6.append(row11.Item_Type);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Sales_Channel != null) {
							sb_tFileOutputDelimited_6.append(row11.Sales_Channel);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Order_Priority != null) {
							sb_tFileOutputDelimited_6.append(row11.Order_Priority);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Order_Date != null) {
							sb_tFileOutputDelimited_6
									.append(FormatterUtils.format_Date(row11.Order_Date, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Order_ID != null) {
							sb_tFileOutputDelimited_6.append(row11.Order_ID);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Ship_Date != null) {
							sb_tFileOutputDelimited_6.append(FormatterUtils.format_Date(row11.Ship_Date, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Units_Sold != null) {
							sb_tFileOutputDelimited_6.append(row11.Units_Sold);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Unit_Price != null) {
							sb_tFileOutputDelimited_6.append(row11.Unit_Price);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Unit_Cost != null) {
							sb_tFileOutputDelimited_6.append(row11.Unit_Cost);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row11.Name != null) {
							sb_tFileOutputDelimited_6.append(row11.Name);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

						nb_line_tFileOutputDelimited_6++;
						resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

						tos_count_tFileOutputDelimited_6++;

						/**
						 * [tFileOutputDelimited_6 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_end ] stop
						 */

					} // End of branch "row11"

					/**
					 * [tJoin_1 process_data_end ] start
					 */

					currentComponent = "tJoin_1";

					/**
					 * [tJoin_1 process_data_end ] stop
					 */

					/**
					 * [tBufferInput_1 process_data_end ] start
					 */

					currentComponent = "tBufferInput_1";

					/**
					 * [tBufferInput_1 process_data_end ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBufferInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row6");

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class orderPriority_MLStruct implements routines.system.IPersistableRow<orderPriority_MLStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(orderPriority_MLStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class orderPriority_HCStruct implements routines.system.IPersistableRow<orderPriority_HCStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(orderPriority_HCStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tRejectOutStruct implements routines.system.IPersistableRow<tRejectOutStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tRejectOutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				orderPriority_MLStruct orderPriority_ML = new orderPriority_MLStruct();
				row9Struct row9 = new row9Struct();
				orderPriority_HCStruct orderPriority_HC = new orderPriority_HCStruct();
				row12Struct row12 = new row12Struct();
				tRejectOutStruct tRejectOut = new tRejectOutStruct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "orderPriority_ML");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class ComparableorderPriority_MLStruct extends orderPriority_MLStruct
						implements Comparable<ComparableorderPriority_MLStruct> {

					public int compareTo(ComparableorderPriority_MLStruct other) {

						if (this.Units_Sold == null && other.Units_Sold != null) {
							return -1;

						} else if (this.Units_Sold != null && other.Units_Sold == null) {
							return 1;

						} else if (this.Units_Sold != null && other.Units_Sold != null) {
							if (!this.Units_Sold.equals(other.Units_Sold)) {
								return this.Units_Sold.compareTo(other.Units_Sold);
							}
						}
						return 0;
					}
				}

				java.util.List<ComparableorderPriority_MLStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<ComparableorderPriority_MLStruct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "orderPriority_HC");
				}

				int tos_count_tSortRow_2_SortOut = 0;

				class ComparableorderPriority_HCStruct extends orderPriority_HCStruct
						implements Comparable<ComparableorderPriority_HCStruct> {

					public int compareTo(ComparableorderPriority_HCStruct other) {

						if (this.Units_Sold == null && other.Units_Sold != null) {
							return -1;

						} else if (this.Units_Sold != null && other.Units_Sold == null) {
							return 1;

						} else if (this.Units_Sold != null && other.Units_Sold != null) {
							if (!this.Units_Sold.equals(other.Units_Sold)) {
								return this.Units_Sold.compareTo(other.Units_Sold);
							}
						}
						return 0;
					}
				}

				java.util.List<ComparableorderPriority_HCStruct> list_tSortRow_2_SortOut = new java.util.ArrayList<ComparableorderPriority_HCStruct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "tRejectOut");
				}

				int tos_count_tSortRow_3_SortOut = 0;

				class ComparabletRejectOutStruct extends tRejectOutStruct
						implements Comparable<ComparabletRejectOutStruct> {

					public int compareTo(ComparabletRejectOutStruct other) {

						if (this.Units_Sold == null && other.Units_Sold != null) {
							return -1;

						} else if (this.Units_Sold != null && other.Units_Sold == null) {
							return 1;

						} else if (this.Units_Sold != null && other.Units_Sold != null) {
							if (!this.Units_Sold.equals(other.Units_Sold)) {
								return this.Units_Sold.compareTo(other.Units_Sold);
							}
						}
						return 0;
					}
				}

				java.util.List<ComparabletRejectOutStruct> list_tSortRow_3_SortOut = new java.util.ArrayList<ComparabletRejectOutStruct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				orderPriority_MLStruct orderPriority_ML_tmp = new orderPriority_MLStruct();
				orderPriority_HCStruct orderPriority_HC_tmp = new orderPriority_HCStruct();
				tRejectOutStruct tRejectOut_tmp = new tRejectOutStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try {

					Object filename_tFileInputDelimited_8 = context.joinFilteredData;
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0 || random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								context.joinFilteredData, "ISO-8859-15", ",", "\n", true, 1, 0,
								limit_tFileInputDelimited_8, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();

						row10 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row10 = new row10Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row10.Region = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							row10.Country = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row10.Item_Type = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 3;

							row10.Sales_Channel = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 4;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 5;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Order_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Date", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Order_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 6;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 7;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Ship_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ship_Date", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Ship_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 8;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 9;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 10;

							temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row10.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE",
											ex_tFileInputDelimited_8.getMessage());
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "row10", temp, ex_tFileInputDelimited_8),
											ex_tFileInputDelimited_8));
								}

							} else {

								row10.Unit_Cost = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 11;

							row10.Name = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);

							if (rowstate_tFileInputDelimited_8.getException() != null) {
								throw rowstate_tFileInputDelimited_8.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_8_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */

						/**
						 * [tFileInputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_begin ] stop
						 */
// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row10"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								orderPriority_ML = null;
								orderPriority_HC = null;
								tRejectOut = null;

								boolean rejected_tMap_2 = true;

// # Output table : 'orderPriority_ML'
// # Filter conditions 
								if (

								row10.Order_Priority == 'M' || row10.Order_Priority == 'L'

								) {
									rejected_tMap_2 = false;
									orderPriority_ML_tmp.Region = row10.Region;
									orderPriority_ML_tmp.Country = row10.Region.equals("Asia")
											? row10.Name + "-" + row10.Country
											: row10.Country;
									orderPriority_ML_tmp.Item_Type = row10.Item_Type;
									orderPriority_ML_tmp.Sales_Channel = row10.Sales_Channel;
									orderPriority_ML_tmp.Order_Priority = row10.Order_Priority;
									orderPriority_ML_tmp.Order_Date = row10.Order_Date;
									orderPriority_ML_tmp.Order_ID = row10.Order_ID;
									orderPriority_ML_tmp.Ship_Date = row10.Ship_Date;
									orderPriority_ML_tmp.Units_Sold = row10.Units_Sold;
									orderPriority_ML_tmp.Unit_Price = row10.Region.equals("Asia")
											&& row10.Item_Type.equals("Fruits")
											&& row10.Order_Date.after(TalendDate.parseDate("dd/MM/yyyy", "29/11/2014"))
													? row10.Unit_Price * 1.5f
													: row10.Unit_Price;
									orderPriority_ML_tmp.Unit_Cost = row10.Unit_Cost;
									orderPriority_ML_tmp.Name = row10.Name;
									orderPriority_ML_tmp.Unique_Code = row10.Name.substring(0, 3)
											+ row10.Region.substring(row10.Region.length() - 3, row10.Region.length())
											+ (row10.Order_ID + "").substring((row10.Order_ID + "").length() - 3,
													(row10.Order_ID + "").length());
									orderPriority_ML = orderPriority_ML_tmp;
								} // closing filter/reject

// # Output table : 'orderPriority_HC'
// # Filter conditions 
								if (

								row10.Order_Priority == 'H' || row10.Order_Priority == 'C'

								) {
									rejected_tMap_2 = false;
									orderPriority_HC_tmp.Region = row10.Region;
									orderPriority_HC_tmp.Country = row10.Region.equals("Asia")
											? row10.Name + "-" + row10.Country
											: row10.Country;
									orderPriority_HC_tmp.Item_Type = row10.Item_Type;
									orderPriority_HC_tmp.Sales_Channel = row10.Sales_Channel;
									orderPriority_HC_tmp.Order_Priority = row10.Order_Priority;
									orderPriority_HC_tmp.Order_Date = row10.Order_Date;
									orderPriority_HC_tmp.Order_ID = row10.Order_ID;
									orderPriority_HC_tmp.Ship_Date = row10.Ship_Date;
									orderPriority_HC_tmp.Units_Sold = row10.Units_Sold;
									orderPriority_HC_tmp.Unit_Price = row10.Region.equals("Asia")
											&& row10.Item_Type.equals("Fruits")
											&& row10.Order_Date.after(TalendDate.parseDate("dd/MM/yyyy", "29/11/2014"))
													? row10.Unit_Price * 1.5f
													: row10.Unit_Price;
									orderPriority_HC_tmp.Unit_Cost = row10.Unit_Cost;
									orderPriority_HC_tmp.Name = row10.Name;
									orderPriority_HC_tmp.Unique_Code = row10.Name.substring(0, 3)
											+ row10.Region.substring(row10.Region.length() - 3, row10.Region.length())
											+ (row10.Order_ID + "").substring((row10.Order_ID + "").length() - 3,
													(row10.Order_ID + "").length());
									orderPriority_HC = orderPriority_HC_tmp;
								} // closing filter/reject
// ###### START REJECTS ##### 

// # Output reject table : 'tRejectOut'
// # Filter conditions 
								if (rejected_tMap_2) {
									tRejectOut_tmp.Region = row10.Region;
									tRejectOut_tmp.Country = row10.Country;
									tRejectOut_tmp.Item_Type = row10.Item_Type;
									tRejectOut_tmp.Sales_Channel = row10.Sales_Channel;
									tRejectOut_tmp.Order_Priority = row10.Order_Priority;
									tRejectOut_tmp.Order_Date = row10.Order_Date;
									tRejectOut_tmp.Order_ID = row10.Order_ID;
									tRejectOut_tmp.Ship_Date = row10.Ship_Date;
									tRejectOut_tmp.Units_Sold = row10.Units_Sold;
									tRejectOut_tmp.Unit_Price = row10.Unit_Price;
									tRejectOut_tmp.Unit_Cost = row10.Unit_Cost;
									tRejectOut_tmp.Name = row10.Name;
									tRejectOut_tmp.Unique_Code = row10.Name.substring(0, 3)
											+ row10.Region.substring(row10.Region.length() - 3, row10.Region.length())
											+ (row10.Order_ID + "").substring((row10.Order_ID + "").length() - 3,
													(row10.Order_ID + "").length());
									tRejectOut = tRejectOut_tmp;
								} // closing filter/reject
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "orderPriority_ML"
							if (orderPriority_ML != null) {

								/**
								 * [tSortRow_1_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "orderPriority_ML"

									);
								}

								ComparableorderPriority_MLStruct arrayRowtSortRow_1_SortOut = new ComparableorderPriority_MLStruct();

								arrayRowtSortRow_1_SortOut.Region = orderPriority_ML.Region;
								arrayRowtSortRow_1_SortOut.Country = orderPriority_ML.Country;
								arrayRowtSortRow_1_SortOut.Item_Type = orderPriority_ML.Item_Type;
								arrayRowtSortRow_1_SortOut.Sales_Channel = orderPriority_ML.Sales_Channel;
								arrayRowtSortRow_1_SortOut.Order_Priority = orderPriority_ML.Order_Priority;
								arrayRowtSortRow_1_SortOut.Order_Date = orderPriority_ML.Order_Date;
								arrayRowtSortRow_1_SortOut.Order_ID = orderPriority_ML.Order_ID;
								arrayRowtSortRow_1_SortOut.Ship_Date = orderPriority_ML.Ship_Date;
								arrayRowtSortRow_1_SortOut.Units_Sold = orderPriority_ML.Units_Sold;
								arrayRowtSortRow_1_SortOut.Unit_Price = orderPriority_ML.Unit_Price;
								arrayRowtSortRow_1_SortOut.Unit_Cost = orderPriority_ML.Unit_Cost;
								arrayRowtSortRow_1_SortOut.Name = orderPriority_ML.Name;
								arrayRowtSortRow_1_SortOut.Unique_Code = orderPriority_ML.Unique_Code;
								list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

								tos_count_tSortRow_1_SortOut++;

								/**
								 * [tSortRow_1_SortOut main ] stop
								 */

								/**
								 * [tSortRow_1_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								/**
								 * [tSortRow_1_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_1_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								/**
								 * [tSortRow_1_SortOut process_data_end ] stop
								 */

							} // End of branch "orderPriority_ML"

// Start of branch "orderPriority_HC"
							if (orderPriority_HC != null) {

								/**
								 * [tSortRow_2_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "orderPriority_HC"

									);
								}

								ComparableorderPriority_HCStruct arrayRowtSortRow_2_SortOut = new ComparableorderPriority_HCStruct();

								arrayRowtSortRow_2_SortOut.Region = orderPriority_HC.Region;
								arrayRowtSortRow_2_SortOut.Country = orderPriority_HC.Country;
								arrayRowtSortRow_2_SortOut.Item_Type = orderPriority_HC.Item_Type;
								arrayRowtSortRow_2_SortOut.Sales_Channel = orderPriority_HC.Sales_Channel;
								arrayRowtSortRow_2_SortOut.Order_Priority = orderPriority_HC.Order_Priority;
								arrayRowtSortRow_2_SortOut.Order_Date = orderPriority_HC.Order_Date;
								arrayRowtSortRow_2_SortOut.Order_ID = orderPriority_HC.Order_ID;
								arrayRowtSortRow_2_SortOut.Ship_Date = orderPriority_HC.Ship_Date;
								arrayRowtSortRow_2_SortOut.Units_Sold = orderPriority_HC.Units_Sold;
								arrayRowtSortRow_2_SortOut.Unit_Price = orderPriority_HC.Unit_Price;
								arrayRowtSortRow_2_SortOut.Unit_Cost = orderPriority_HC.Unit_Cost;
								arrayRowtSortRow_2_SortOut.Name = orderPriority_HC.Name;
								arrayRowtSortRow_2_SortOut.Unique_Code = orderPriority_HC.Unique_Code;
								list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

								tos_count_tSortRow_2_SortOut++;

								/**
								 * [tSortRow_2_SortOut main ] stop
								 */

								/**
								 * [tSortRow_2_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								/**
								 * [tSortRow_2_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_2_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								/**
								 * [tSortRow_2_SortOut process_data_end ] stop
								 */

							} // End of branch "orderPriority_HC"

// Start of branch "tRejectOut"
							if (tRejectOut != null) {

								/**
								 * [tSortRow_3_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_3";

								currentComponent = "tSortRow_3_SortOut";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tRejectOut"

									);
								}

								ComparabletRejectOutStruct arrayRowtSortRow_3_SortOut = new ComparabletRejectOutStruct();

								arrayRowtSortRow_3_SortOut.Region = tRejectOut.Region;
								arrayRowtSortRow_3_SortOut.Country = tRejectOut.Country;
								arrayRowtSortRow_3_SortOut.Item_Type = tRejectOut.Item_Type;
								arrayRowtSortRow_3_SortOut.Sales_Channel = tRejectOut.Sales_Channel;
								arrayRowtSortRow_3_SortOut.Order_Priority = tRejectOut.Order_Priority;
								arrayRowtSortRow_3_SortOut.Order_Date = tRejectOut.Order_Date;
								arrayRowtSortRow_3_SortOut.Order_ID = tRejectOut.Order_ID;
								arrayRowtSortRow_3_SortOut.Ship_Date = tRejectOut.Ship_Date;
								arrayRowtSortRow_3_SortOut.Units_Sold = tRejectOut.Units_Sold;
								arrayRowtSortRow_3_SortOut.Unit_Price = tRejectOut.Unit_Price;
								arrayRowtSortRow_3_SortOut.Unit_Cost = tRejectOut.Unit_Cost;
								arrayRowtSortRow_3_SortOut.Name = tRejectOut.Name;
								arrayRowtSortRow_3_SortOut.Unique_Code = tRejectOut.Unique_Code;
								list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

								tos_count_tSortRow_3_SortOut++;

								/**
								 * [tSortRow_3_SortOut main ] stop
								 */

								/**
								 * [tSortRow_3_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_3";

								currentComponent = "tSortRow_3_SortOut";

								/**
								 * [tSortRow_3_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_3_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_3";

								currentComponent = "tSortRow_3_SortOut";

								/**
								 * [tSortRow_3_SortOut process_data_end ] stop
								 */

							} // End of branch "tRejectOut"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) (context.joinFilteredData) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				orderPriority_MLStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new ComparableorderPriority_MLStruct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "orderPriority_ML");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(context.orderPriority_ML)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("Region");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Country");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Item_Type");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Sales_Channel");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_Priority");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_Date");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_ID");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Ship_Date");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Units_Sold");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Unit_Price");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Unit_Cost");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Name");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Unique_Code");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				orderPriority_MLStruct[] array_tSortRow_1_SortIn = (orderPriority_MLStruct[]) globalMap
						.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				orderPriority_MLStruct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row9.Region = current_tSortRow_1_SortIn.Region;
					row9.Country = current_tSortRow_1_SortIn.Country;
					row9.Item_Type = current_tSortRow_1_SortIn.Item_Type;
					row9.Sales_Channel = current_tSortRow_1_SortIn.Sales_Channel;
					row9.Order_Priority = current_tSortRow_1_SortIn.Order_Priority;
					row9.Order_Date = current_tSortRow_1_SortIn.Order_Date;
					row9.Order_ID = current_tSortRow_1_SortIn.Order_ID;
					row9.Ship_Date = current_tSortRow_1_SortIn.Ship_Date;
					row9.Units_Sold = current_tSortRow_1_SortIn.Units_Sold;
					row9.Unit_Price = current_tSortRow_1_SortIn.Unit_Price;
					row9.Unit_Cost = current_tSortRow_1_SortIn.Unit_Cost;
					row9.Name = current_tSortRow_1_SortIn.Name;
					row9.Unique_Code = current_tSortRow_1_SortIn.Unique_Code;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 main ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row9"

						);
					}

					StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
					if (row9.Region != null) {
						sb_tFileOutputDelimited_4.append(row9.Region);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Country != null) {
						sb_tFileOutputDelimited_4.append(row9.Country);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Item_Type != null) {
						sb_tFileOutputDelimited_4.append(row9.Item_Type);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Sales_Channel != null) {
						sb_tFileOutputDelimited_4.append(row9.Sales_Channel);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Order_Priority != null) {
						sb_tFileOutputDelimited_4.append(row9.Order_Priority);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Order_Date != null) {
						sb_tFileOutputDelimited_4.append(FormatterUtils.format_Date(row9.Order_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Order_ID != null) {
						sb_tFileOutputDelimited_4.append(row9.Order_ID);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Ship_Date != null) {
						sb_tFileOutputDelimited_4.append(FormatterUtils.format_Date(row9.Ship_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Units_Sold != null) {
						sb_tFileOutputDelimited_4.append(row9.Units_Sold);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Unit_Price != null) {
						sb_tFileOutputDelimited_4.append(row9.Unit_Price);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Unit_Cost != null) {
						sb_tFileOutputDelimited_4.append(row9.Unit_Cost);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Name != null) {
						sb_tFileOutputDelimited_4.append(row9.Name);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row9.Unique_Code != null) {
						sb_tFileOutputDelimited_4.append(row9.Unique_Code);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

					nb_line_tFileOutputDelimited_4++;
					resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

					outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

					tos_count_tFileOutputDelimited_4++;

					/**
					 * [tFileOutputDelimited_4 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				orderPriority_HCStruct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut
						.toArray(new ComparableorderPriority_HCStruct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "orderPriority_HC");
				}

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(context.orderPriority_HC)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("Region");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Country");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Item_Type");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Sales_Channel");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Order_Priority");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Order_Date");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Order_ID");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Ship_Date");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Units_Sold");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Unit_Price");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Unit_Cost");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Name");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Unique_Code");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortIn", false);
				start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				int tos_count_tSortRow_2_SortIn = 0;

				orderPriority_HCStruct[] array_tSortRow_2_SortIn = (orderPriority_HCStruct[]) globalMap
						.remove("tSortRow_2");

				int nb_line_tSortRow_2_SortIn = 0;

				orderPriority_HCStruct current_tSortRow_2_SortIn = null;

				for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
					current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
					row12.Region = current_tSortRow_2_SortIn.Region;
					row12.Country = current_tSortRow_2_SortIn.Country;
					row12.Item_Type = current_tSortRow_2_SortIn.Item_Type;
					row12.Sales_Channel = current_tSortRow_2_SortIn.Sales_Channel;
					row12.Order_Priority = current_tSortRow_2_SortIn.Order_Priority;
					row12.Order_Date = current_tSortRow_2_SortIn.Order_Date;
					row12.Order_ID = current_tSortRow_2_SortIn.Order_ID;
					row12.Ship_Date = current_tSortRow_2_SortIn.Ship_Date;
					row12.Units_Sold = current_tSortRow_2_SortIn.Units_Sold;
					row12.Unit_Price = current_tSortRow_2_SortIn.Unit_Price;
					row12.Unit_Cost = current_tSortRow_2_SortIn.Unit_Cost;
					row12.Name = current_tSortRow_2_SortIn.Name;
					row12.Unique_Code = current_tSortRow_2_SortIn.Unique_Code;
					// increase number of line sorted
					nb_line_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					tos_count_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn main ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 main ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row12"

						);
					}

					StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
					if (row12.Region != null) {
						sb_tFileOutputDelimited_5.append(row12.Region);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Country != null) {
						sb_tFileOutputDelimited_5.append(row12.Country);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Item_Type != null) {
						sb_tFileOutputDelimited_5.append(row12.Item_Type);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Sales_Channel != null) {
						sb_tFileOutputDelimited_5.append(row12.Sales_Channel);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Order_Priority != null) {
						sb_tFileOutputDelimited_5.append(row12.Order_Priority);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Order_Date != null) {
						sb_tFileOutputDelimited_5.append(FormatterUtils.format_Date(row12.Order_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Order_ID != null) {
						sb_tFileOutputDelimited_5.append(row12.Order_ID);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Ship_Date != null) {
						sb_tFileOutputDelimited_5.append(FormatterUtils.format_Date(row12.Ship_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Units_Sold != null) {
						sb_tFileOutputDelimited_5.append(row12.Units_Sold);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Unit_Price != null) {
						sb_tFileOutputDelimited_5.append(row12.Unit_Price);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Unit_Cost != null) {
						sb_tFileOutputDelimited_5.append(row12.Unit_Cost);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Name != null) {
						sb_tFileOutputDelimited_5.append(row12.Name);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row12.Unique_Code != null) {
						sb_tFileOutputDelimited_5.append(row12.Unique_Code);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

					nb_line_tFileOutputDelimited_5++;
					resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

					outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

					tos_count_tFileOutputDelimited_5++;

					/**
					 * [tFileOutputDelimited_5 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

				}

				globalMap.put("tSortRow_2_SortIn_NB_LINE", nb_line_tSortRow_2_SortIn);

				ok_Hash.put("tSortRow_2_SortIn", true);
				end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				tRejectOutStruct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut
						.toArray(new ComparabletRejectOutStruct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tRejectOut");
				}

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(context.filteredReject)).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
							fileName_tFileOutputDelimited_7.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
																		 * Start field
																		 * tFileOutputDelimited_7:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("Region");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Country");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Item_Type");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Sales_Channel");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Order_Priority");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Order_Date");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Order_ID");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Ship_Date");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Units_Sold");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Unit_Price");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Unit_Cost");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Name");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Unique_Code");
					outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortIn", false);
				start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				int tos_count_tSortRow_3_SortIn = 0;

				tRejectOutStruct[] array_tSortRow_3_SortIn = (tRejectOutStruct[]) globalMap.remove("tSortRow_3");

				int nb_line_tSortRow_3_SortIn = 0;

				tRejectOutStruct current_tSortRow_3_SortIn = null;

				for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
					current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
					row13.Region = current_tSortRow_3_SortIn.Region;
					row13.Country = current_tSortRow_3_SortIn.Country;
					row13.Item_Type = current_tSortRow_3_SortIn.Item_Type;
					row13.Sales_Channel = current_tSortRow_3_SortIn.Sales_Channel;
					row13.Order_Priority = current_tSortRow_3_SortIn.Order_Priority;
					row13.Order_Date = current_tSortRow_3_SortIn.Order_Date;
					row13.Order_ID = current_tSortRow_3_SortIn.Order_ID;
					row13.Ship_Date = current_tSortRow_3_SortIn.Ship_Date;
					row13.Units_Sold = current_tSortRow_3_SortIn.Units_Sold;
					row13.Unit_Price = current_tSortRow_3_SortIn.Unit_Price;
					row13.Unit_Cost = current_tSortRow_3_SortIn.Unit_Cost;
					row13.Name = current_tSortRow_3_SortIn.Name;
					row13.Unique_Code = current_tSortRow_3_SortIn.Unique_Code;
					// increase number of line sorted
					nb_line_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_3_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					tos_count_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn main ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 main ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row13"

						);
					}

					StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
					if (row13.Region != null) {
						sb_tFileOutputDelimited_7.append(row13.Region);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Country != null) {
						sb_tFileOutputDelimited_7.append(row13.Country);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Item_Type != null) {
						sb_tFileOutputDelimited_7.append(row13.Item_Type);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Sales_Channel != null) {
						sb_tFileOutputDelimited_7.append(row13.Sales_Channel);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Order_Priority != null) {
						sb_tFileOutputDelimited_7.append(row13.Order_Priority);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Order_Date != null) {
						sb_tFileOutputDelimited_7.append(FormatterUtils.format_Date(row13.Order_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Order_ID != null) {
						sb_tFileOutputDelimited_7.append(row13.Order_ID);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Ship_Date != null) {
						sb_tFileOutputDelimited_7.append(FormatterUtils.format_Date(row13.Ship_Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Units_Sold != null) {
						sb_tFileOutputDelimited_7.append(row13.Units_Sold);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Unit_Price != null) {
						sb_tFileOutputDelimited_7.append(row13.Unit_Price);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Unit_Cost != null) {
						sb_tFileOutputDelimited_7.append(row13.Unit_Cost);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Name != null) {
						sb_tFileOutputDelimited_7.append(row13.Name);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
					if (row13.Unique_Code != null) {
						sb_tFileOutputDelimited_7.append(row13.Unique_Code);
					}
					sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

					nb_line_tFileOutputDelimited_7++;
					resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

					tos_count_tFileOutputDelimited_7++;

					/**
					 * [tFileOutputDelimited_7 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

					/**
					 * [tFileOutputDelimited_7 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

					/**
					 * [tFileOutputDelimited_7 process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

				}

				globalMap.put("tSortRow_3_SortIn_NB_LINE", nb_line_tSortRow_3_SortIn);

				ok_Hash.put("tSortRow_3_SortIn", true);
				end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE", nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tSortRow_3_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				/**
				 * [tSortRow_3_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_3_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				/**
				 * [tSortRow_3_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Item_Type=" + Item_Type);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Item_Type=" + Item_Type);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class Units_Sold_ItemTypeStruct
			implements routines.system.IPersistableRow<Units_Sold_ItemTypeStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Item_Type=" + Item_Type);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Units_Sold_ItemTypeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Item_Type=" + Item_Type);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Item_Type = readString(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Item_Type, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Item_Type=" + Item_Type);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Units_Sold = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				row16Struct row16 = new row16Struct();
				row19Struct row19 = new row19Struct();
				row19Struct row23 = row19;
				row20Struct row20 = new row20Struct();
				row21Struct row21 = new row21Struct();
				outStruct out = new outStruct();
				Units_Sold_ItemTypeStruct Units_Sold_ItemType = new Units_Sold_ItemTypeStruct();
				Units_Sold_ItemTypeStruct row24 = Units_Sold_ItemType;

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Country;
					Integer Units_Sold_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Country == null) ? 0 : this.Country.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.Country == null) {
							if (other.Country != null)
								return false;
						} else if (!this.Country.equals(other.Country))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Item_Type;
					Integer Units_Sold_sum;
					BigDecimal Unit_Cost_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Item_Type == null) ? 0 : this.Item_Type.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.Item_Type == null) {
							if (other.Item_Type != null)
								return false;
						} else if (!this.Item_Type.equals(other.Item_Type))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try {

					Object filename_tFileInputDelimited_9 = context.joinFilteredData;
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0 || random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								context.joinFilteredData, "ISO-8859-15", ",", "\n", true, 1, 0,
								limit_tFileInputDelimited_9, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();

						row18 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row18 = new row18Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_9 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_9 = 0;

							row18.Region = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 1;

							row18.Country = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 2;

							row18.Item_Type = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 3;

							row18.Sales_Channel = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 4;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 5;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Order_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Date", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Order_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 6;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 7;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Ship_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ship_Date", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Ship_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 8;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 9;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 10;

							temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								try {

									row18.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_9) {
									globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
											ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "row18", temp, ex_tFileInputDelimited_9),
											ex_tFileInputDelimited_9));
								}

							} else {

								row18.Unit_Cost = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 11;

							row18.Name = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);

							if (rowstate_tFileInputDelimited_9.getException() != null) {
								throw rowstate_tFileInputDelimited_9.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */

						/**
						 * [tFileInputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_begin ] stop
						 */
// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tReplicate_2 main ] start
							 */

							currentComponent = "tReplicate_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row18"

								);
							}

							row16 = new row16Struct();

							row16.Region = row18.Region;
							row16.Country = row18.Country;
							row16.Item_Type = row18.Item_Type;
							row16.Sales_Channel = row18.Sales_Channel;
							row16.Order_Priority = row18.Order_Priority;
							row16.Order_Date = row18.Order_Date;
							row16.Order_ID = row18.Order_ID;
							row16.Ship_Date = row18.Ship_Date;
							row16.Units_Sold = row18.Units_Sold;
							row16.Unit_Price = row18.Unit_Price;
							row16.Unit_Cost = row18.Unit_Cost;
							row16.Name = row18.Name;
							row20 = new row20Struct();

							row20.Region = row18.Region;
							row20.Country = row18.Country;
							row20.Item_Type = row18.Item_Type;
							row20.Sales_Channel = row18.Sales_Channel;
							row20.Order_Priority = row18.Order_Priority;
							row20.Order_Date = row18.Order_Date;
							row20.Order_ID = row18.Order_ID;
							row20.Ship_Date = row18.Ship_Date;
							row20.Units_Sold = row18.Units_Sold;
							row20.Unit_Price = row18.Unit_Price;
							row20.Unit_Cost = row18.Unit_Cost;
							row20.Name = row18.Name;

							tos_count_tReplicate_2++;

							/**
							 * [tReplicate_2 main ] stop
							 */

							/**
							 * [tReplicate_2 process_data_begin ] start
							 */

							currentComponent = "tReplicate_2";

							/**
							 * [tReplicate_2 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row16"

								);
							}

							operation_finder_tAggregateRow_1.Country = row16.Country;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.Country = operation_finder_tAggregateRow_1.Country;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.Units_Sold_sum == null) {
								operation_result_tAggregateRow_1.Units_Sold_sum = (int) 0;
							}

							if (row16.Units_Sold != null)
								operation_result_tAggregateRow_1.Units_Sold_sum += row16.Units_Sold;

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tAggregateRow_2_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_2";

							currentComponent = "tAggregateRow_2_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row20"

								);
							}

							operation_finder_tAggregateRow_2.Item_Type = row20.Item_Type;

							operation_finder_tAggregateRow_2.hashCodeDirty = true;

							operation_result_tAggregateRow_2 = hash_tAggregateRow_2
									.get(operation_finder_tAggregateRow_2);

							if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

								operation_result_tAggregateRow_2.Item_Type = operation_finder_tAggregateRow_2.Item_Type;

								hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
										operation_result_tAggregateRow_2);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_2.Units_Sold_sum == null) {
								operation_result_tAggregateRow_2.Units_Sold_sum = (int) 0;
							}

							if (row20.Units_Sold != null)
								operation_result_tAggregateRow_2.Units_Sold_sum += row20.Units_Sold;
							if (operation_result_tAggregateRow_2.Unit_Cost_sum == null) {
								operation_result_tAggregateRow_2.Unit_Cost_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_2.Unit_Cost_sum = operation_result_tAggregateRow_2.Unit_Cost_sum
									.add(new BigDecimal(String.valueOf(row20.Unit_Cost)));

							tos_count_tAggregateRow_2_AGGOUT++;

							/**
							 * [tAggregateRow_2_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_2_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_2";

							currentComponent = "tAggregateRow_2_AGGOUT";

							/**
							 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_2_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_2";

							currentComponent = "tAggregateRow_2_AGGOUT";

							/**
							 * [tAggregateRow_2_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tReplicate_2 process_data_end ] start
							 */

							currentComponent = "tReplicate_2";

							/**
							 * [tReplicate_2 process_data_end ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) (context.joinFilteredData) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("totalUnitSold-Country");
				util_tLogRow_1.addRow(new String[] { "Country", "Units_Sold", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row19.Country = aggregated_row_tAggregateRow_1.Country;
					row19.Units_Sold = aggregated_row_tAggregateRow_1.Units_Sold_sum;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row19"

						);
					}

///////////////////////		

					String[] row_tLogRow_1 = new String[2];

					if (row19.Country != null) { //
						row_tLogRow_1[0] = String.valueOf(row19.Country);

					} //

					if (row19.Units_Sold != null) { //
						row_tLogRow_1[1] = String.valueOf(row19.Units_Sold);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					row23 = row19;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_1 main ] start
					 */

					currentComponent = "tJavaRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row23"

						);
					}

					globalMap.put(row23.Country + "unit_sold_country", row23.Units_Sold);

					nb_line_tJavaRow_1++;

					tos_count_tJavaRow_1++;

					/**
					 * [tJavaRow_1 main ] stop
					 */

					/**
					 * [tJavaRow_1 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_1";

					/**
					 * [tJavaRow_1 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_1 process_data_end ] start
					 */

					currentComponent = "tJavaRow_1";

					/**
					 * [tJavaRow_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out");
				}

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Units_Sold_ItemType");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("totalUnitsSold-itemType");
				util_tLogRow_2.addRow(new String[] { "Item_Type", "Units_Sold", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
				Units_Sold_ItemTypeStruct Units_Sold_ItemType_tmp = new Units_Sold_ItemTypeStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row21.Item_Type = aggregated_row_tAggregateRow_2.Item_Type;
					row21.Units_Sold = aggregated_row_tAggregateRow_2.Units_Sold_sum;

					if (aggregated_row_tAggregateRow_2.Unit_Cost_sum != null) {
						row21.Unit_Cost = aggregated_row_tAggregateRow_2.Unit_Cost_sum.floatValue();

					} else {

						row21.Unit_Cost = null;

					}

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row21"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						out = null;
						Units_Sold_ItemType = null;

// # Output table : 'out'
						out_tmp.Item_Type = row21.Item_Type;
						out_tmp.Units_Sold = row21.Units_Sold;
						out_tmp.Unit_Cost = row21.Unit_Cost;
						out = out_tmp;

// # Output table : 'Units_Sold_ItemType'
						Units_Sold_ItemType_tmp.Item_Type = row21.Item_Type;
						Units_Sold_ItemType_tmp.Units_Sold = row21.Units_Sold;
						Units_Sold_ItemType = Units_Sold_ItemType_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */

					/**
					 * [tMap_3 process_data_begin ] start
					 */

					currentComponent = "tMap_3";

					/**
					 * [tMap_3 process_data_begin ] stop
					 */
// Start of branch "out"
					if (out != null) {

						/**
						 * [tSetGlobalVar_1 main ] start
						 */

						currentComponent = "tSetGlobalVar_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "out"

							);
						}

						globalMap.put(out.Item_Type, out.Units_Sold * out.Unit_Cost);

						tos_count_tSetGlobalVar_1++;

						/**
						 * [tSetGlobalVar_1 main ] stop
						 */

						/**
						 * [tSetGlobalVar_1 process_data_begin ] start
						 */

						currentComponent = "tSetGlobalVar_1";

						/**
						 * [tSetGlobalVar_1 process_data_begin ] stop
						 */

						/**
						 * [tSetGlobalVar_1 process_data_end ] start
						 */

						currentComponent = "tSetGlobalVar_1";

						/**
						 * [tSetGlobalVar_1 process_data_end ] stop
						 */

					} // End of branch "out"

// Start of branch "Units_Sold_ItemType"
					if (Units_Sold_ItemType != null) {

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "Units_Sold_ItemType"

							);
						}

///////////////////////		

						String[] row_tLogRow_2 = new String[2];

						if (Units_Sold_ItemType.Item_Type != null) { //
							row_tLogRow_2[0] = String.valueOf(Units_Sold_ItemType.Item_Type);

						} //

						if (Units_Sold_ItemType.Units_Sold != null) { //
							row_tLogRow_2[1] = String.valueOf(Units_Sold_ItemType.Units_Sold);

						} //

						util_tLogRow_2.addRow(row_tLogRow_2);
						nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

						row24 = Units_Sold_ItemType;

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row24"

							);
						}

						globalMap.put(row24.Item_Type + "unit_sold_itemType", row24.Units_Sold);

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_end ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_end ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

					} // End of branch "Units_Sold_ItemType"

					/**
					 * [tMap_3 process_data_end ] start
					 */

					currentComponent = "tMap_3";

					/**
					 * [tMap_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out");
				}

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Units_Sold_ItemType");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class percentageStruct implements routines.system.IPersistableRow<percentageStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String percentage;

		public String getPercentage() {
			return this.percentage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.percentage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.percentage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.percentage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.percentage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("percentage=" + percentage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(percentageStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();
				percentageStruct percentage = new percentageStruct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "percentage");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length() + 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("percentageCost-ItemType");
				util_tLogRow_3.addRow(new String[] { "percentage", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				percentageStruct percentage_tmp = new percentageStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try {

					Object filename_tFileInputDelimited_10 = context.joinFilteredData;
					if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
						if (footer_value_tFileInputDelimited_10 > 0 || random_value_tFileInputDelimited_10 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(
								context.joinFilteredData, "ISO-8859-15", ",", "\n", true, 1, 0,
								limit_tFileInputDelimited_10, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_10 != null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();

						row22 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row22 = new row22Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_10 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_10 = 0;

							row22.Region = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 1;

							row22.Country = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 2;

							row22.Item_Type = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 3;

							row22.Sales_Channel = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 4;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 5;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Order_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Date", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Order_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 6;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 7;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Ship_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ship_Date", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Ship_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 8;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 9;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 10;

							temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								try {

									row22.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_10) {
									globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",
											ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "row22", temp, ex_tFileInputDelimited_10),
											ex_tFileInputDelimited_10));
								}

							} else {

								row22.Unit_Cost = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 11;

							row22.Name = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);

							if (rowstate_tFileInputDelimited_10.getException() != null) {
								throw rowstate_tFileInputDelimited_10.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row22 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */

						/**
						 * [tFileInputDelimited_10 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_begin ] stop
						 */
// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row22"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								percentage = null;

// # Output table : 'percentage'
								percentage_tmp.percentage = "Percentage cost of type "
										+ row22.Item_Type + " in country " + row22.Country + " is " + (row22.Unit_Cost
												* row22.Units_Sold / (Float) globalMap.get(row22.Item_Type) * 100)
										+ "%";
								percentage = percentage_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "percentage"
							if (percentage != null) {

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "percentage"

									);
								}

///////////////////////		

								String[] row_tLogRow_3 = new String[1];

								if (percentage.percentage != null) { //
									row_tLogRow_3[0] = String.valueOf(percentage.percentage);

								} //

								util_tLogRow_3.addRow(row_tLogRow_3);
								nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tLogRow_3 process_data_begin ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_3 process_data_end ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_end ] stop
								 */

							} // End of branch "percentage"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFileInputDelimited_10 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						/**
						 * [tFileInputDelimited_10 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

					}
				} finally {
					if (!((Object) (context.joinFilteredData) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_10 != null) {
							fid_tFileInputDelimited_10.close();
						}
					}
					if (fid_tFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "percentage");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_10 finally ] start
				 */

				currentComponent = "tFileInputDelimited_10";

				/**
				 * [tFileInputDelimited_10 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String SalesChannel;

		public String getSalesChannel() {
			return this.SalesChannel;
		}

		public Integer Order_Id;

		public Integer getOrder_Id() {
			return this.Order_Id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Order_Id == null) ? 0 : this.Order_Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.Order_Id == null) {
				if (other.Order_Id != null)
					return false;

			} else if (!this.Order_Id.equals(other.Order_Id))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.Name = this.Name;
			other.SalesChannel = this.SalesChannel;
			other.Order_Id = this.Order_Id;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.Order_Id = this.Order_Id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Order_Id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Order_Id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Order_Id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Order_Id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.SalesChannel = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Name = readString(dis, objectIn);

				this.SalesChannel = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.SalesChannel, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Name, dos, objectOut);

				writeString(this.SalesChannel, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Name=" + Name);
			sb.append(",SalesChannel=" + SalesChannel);
			sb.append(",Order_Id=" + String.valueOf(Order_Id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Order_Id, other.Order_Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tHash_row6 begin ] start
				 */

				ok_Hash.put("tHash_row6", false);
				start_Hash.put("tHash_row6", System.currentTimeMillis());

				currentComponent = "tHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tHash_row6 = 0;

				java.util.Map<row6Struct, row6Struct> tHash_row6 = new java.util.LinkedHashMap<row6Struct, row6Struct>();
				globalMap.put("tHash_row6", tHash_row6);

				/**
				 * [tHash_row6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = context.inputFile2;
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.inputFile2,
								"US-ASCII", ",", "\n", false, 1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row6 = null;

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row6.Name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row6.SalesChannel = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row6.Order_Id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Id", "row6", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row6.Order_Id = null;

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tHash_row6 main ] start
							 */

							currentComponent = "tHash_row6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row6"

								);
							}

							row6Struct row6_HashRow = new row6Struct();

							row6_HashRow.Name = row6.Name;
							row6_HashRow.SalesChannel = row6.SalesChannel;
							row6_HashRow.Order_Id = row6.Order_Id;
							tHash_row6.put(row6_HashRow, row6_HashRow);

							tos_count_tHash_row6++;

							/**
							 * [tHash_row6 main ] stop
							 */

							/**
							 * [tHash_row6 process_data_begin ] start
							 */

							currentComponent = "tHash_row6";

							/**
							 * [tHash_row6 process_data_begin ] stop
							 */

							/**
							 * [tHash_row6 process_data_end ] start
							 */

							currentComponent = "tHash_row6";

							/**
							 * [tHash_row6 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (context.inputFile2) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tHash_row6 end ] start
				 */

				currentComponent = "tHash_row6";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tHash_row6", true);
				end_Hash.put("tHash_row6", System.currentTimeMillis());

				/**
				 * [tHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tHash_row6 finally ] start
				 */

				currentComponent = "tHash_row6";

				/**
				 * [tHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(context.tempFile)).getAbsolutePath().replace("\\",
						"/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
							fileName_tFileOutputDelimited_8.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);
				int nb_line_tFileOutputDelimited_8 = 0;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
																		 * Start field
																		 * tFileOutputDelimited_8:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				if (fileToDelete_tFileOutputDelimited_8.exists()) {
					fileToDelete_tFileOutputDelimited_8.delete();
				}
				outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_8.length() == 0) {
					outtFileOutputDelimited_8.write("Region");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Country");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Item_Type");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Sales_Channel");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Order_Priority");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Order_Date");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Order_ID");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Ship_Date");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Units_Sold");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Unit_Price");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Unit_Cost");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Name");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Unique_Code");
					outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
				resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = context.orderPriority_ML;
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								context.orderPriority_ML, "ISO-8859-15", ",", "\n", true, 1, 0,
								limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row8 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row8 = new row8Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row8.Region = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row8.Country = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row8.Item_Type = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							row8.Sales_Channel = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 5;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Order_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Date", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Order_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 6;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 7;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Ship_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ship_Date", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Ship_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 8;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 9;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 10;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row8.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "row8", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row8.Unit_Cost = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 11;

							row8.Name = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 12;

							row8.Unique_Code = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tFileOutputDelimited_8 main ] start
							 */

							currentComponent = "tFileOutputDelimited_8";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row8"

								);
							}

							StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
							if (row8.Region != null) {
								sb_tFileOutputDelimited_8.append(row8.Region);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Country != null) {
								sb_tFileOutputDelimited_8.append(row8.Country);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Item_Type != null) {
								sb_tFileOutputDelimited_8.append(row8.Item_Type);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Sales_Channel != null) {
								sb_tFileOutputDelimited_8.append(row8.Sales_Channel);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Order_Priority != null) {
								sb_tFileOutputDelimited_8.append(row8.Order_Priority);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Order_Date != null) {
								sb_tFileOutputDelimited_8
										.append(FormatterUtils.format_Date(row8.Order_Date, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Order_ID != null) {
								sb_tFileOutputDelimited_8.append(row8.Order_ID);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Ship_Date != null) {
								sb_tFileOutputDelimited_8
										.append(FormatterUtils.format_Date(row8.Ship_Date, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Units_Sold != null) {
								sb_tFileOutputDelimited_8.append(row8.Units_Sold);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Unit_Price != null) {
								sb_tFileOutputDelimited_8.append(row8.Unit_Price);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Unit_Cost != null) {
								sb_tFileOutputDelimited_8.append(row8.Unit_Cost);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Name != null) {
								sb_tFileOutputDelimited_8.append(row8.Name);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
							if (row8.Unique_Code != null) {
								sb_tFileOutputDelimited_8.append(row8.Unique_Code);
							}
							sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

							nb_line_tFileOutputDelimited_8++;
							resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

							outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());

							tos_count_tFileOutputDelimited_8++;

							/**
							 * [tFileOutputDelimited_8 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_8 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_8";

							/**
							 * [tFileOutputDelimited_8 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_8 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_8";

							/**
							 * [tFileOutputDelimited_8 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) (context.orderPriority_ML) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE", nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class appendStruct implements routines.system.IPersistableRow<appendStruct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(appendStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				appendStruct append = new appendStruct();

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "append");
				}

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(context.tempFile)).getAbsolutePath().replace("\\",
						"/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
							fileName_tFileOutputDelimited_9.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);
				if (filetFileOutputDelimited_9.exists()) {
					isFileGenerated_tFileOutputDelimited_9 = false;
				}
				int nb_line_tFileOutputDelimited_9 = 0;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
																		 * Start field
																		 * tFileOutputDelimited_9:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;

				outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_9.length() == 0) {
					outtFileOutputDelimited_9.write("Country");
					outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
				resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = context.orderPriority_HC;
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								context.orderPriority_HC, "ISO-8859-15", ",", "\n", true, 1, 0,
								limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						append = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						append = new appendStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_5 = 0;

							append.Region = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							append.Country = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							append.Item_Type = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							append.Sales_Channel = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 5;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Order_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Date", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Order_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 6;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 7;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Ship_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ship_Date", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Ship_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 8;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 9;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 10;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									append.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",
											ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "append", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								append.Unit_Cost = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 11;

							append.Name = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 12;

							append.Unique_Code = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							append = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "append"
						if (append != null) {

							/**
							 * [tFileOutputDelimited_9 main ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "append"

								);
							}

							StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
							if (append.Country != null) {
								sb_tFileOutputDelimited_9.append(append.Country);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

							nb_line_tFileOutputDelimited_9++;
							resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

							outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());

							tos_count_tFileOutputDelimited_9++;

							/**
							 * [tFileOutputDelimited_9 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_9 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							/**
							 * [tFileOutputDelimited_9 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_9 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							/**
							 * [tFileOutputDelimited_9 process_data_end ] stop
							 */

						} // End of branch "append"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) (context.orderPriority_HC) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE", nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "append");
				}

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFileInputDelimited_7Process(globalMap);

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_4> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Item_Type;

		public String getItem_Type() {
			return this.Item_Type;
		}

		public String Sales_Channel;

		public String getSales_Channel() {
			return this.Sales_Channel;
		}

		public Character Order_Priority;

		public Character getOrder_Priority() {
			return this.Order_Priority;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Integer Order_ID;

		public Integer getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Ship_Date;

		public java.util.Date getShip_Date() {
			return this.Ship_Date;
		}

		public Integer Units_Sold;

		public Integer getUnits_Sold() {
			return this.Units_Sold;
		}

		public Float Unit_Price;

		public Float getUnit_Price() {
			return this.Unit_Price;
		}

		public Float Unit_Cost;

		public Float getUnit_Cost() {
			return this.Unit_Cost;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Unique_Code;

		public String getUnique_Code() {
			return this.Unique_Code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.Region = readString(dis);

					this.Country = readString(dis);

					this.Item_Type = readString(dis);

					this.Sales_Channel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Priority = null;
					} else {
						this.Order_Priority = dis.readChar();
					}

					this.Order_Date = readDate(dis);

					this.Order_ID = readInteger(dis);

					this.Ship_Date = readDate(dis);

					this.Units_Sold = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Price = null;
					} else {
						this.Unit_Price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Unit_Cost = null;
					} else {
						this.Unit_Cost = dis.readFloat();
					}

					this.Name = readString(dis);

					this.Unique_Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Region, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Item_Type, dos);

				// String

				writeString(this.Sales_Channel, dos);

				// Character

				if (this.Order_Priority == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Order_Priority);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Integer

				writeInteger(this.Order_ID, dos);

				// java.util.Date

				writeDate(this.Ship_Date, dos);

				// Integer

				writeInteger(this.Units_Sold, dos);

				// Float

				if (this.Unit_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Price);
				}

				// Float

				if (this.Unit_Cost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Unit_Cost);
				}

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Unique_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Region=" + Region);
			sb.append(",Country=" + Country);
			sb.append(",Item_Type=" + Item_Type);
			sb.append(",Sales_Channel=" + Sales_Channel);
			sb.append(",Order_Priority=" + String.valueOf(Order_Priority));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Ship_Date=" + String.valueOf(Ship_Date));
			sb.append(",Units_Sold=" + String.valueOf(Units_Sold));
			sb.append(",Unit_Price=" + String.valueOf(Unit_Price));
			sb.append(",Unit_Cost=" + String.valueOf(Unit_Cost));
			sb.append(",Name=" + Name);
			sb.append(",Unique_Code=" + Unique_Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();
				row15Struct row15 = new row15Struct();

				/**
				 * [tSortRow_4_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortOut", false);
				start_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tSortRow_4_SortOut = 0;

				class Comparablerow14Struct extends row14Struct implements Comparable<Comparablerow14Struct> {

					public int compareTo(Comparablerow14Struct other) {

						if (this.Units_Sold == null && other.Units_Sold != null) {
							return -1;

						} else if (this.Units_Sold != null && other.Units_Sold == null) {
							return 1;

						} else if (this.Units_Sold != null && other.Units_Sold != null) {
							if (!this.Units_Sold.equals(other.Units_Sold)) {
								return this.Units_Sold.compareTo(other.Units_Sold);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow14Struct> list_tSortRow_4_SortOut = new java.util.ArrayList<Comparablerow14Struct>();

				/**
				 * [tSortRow_4_SortOut begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = context.tempFile;
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(context.tempFile,
								"ISO-8859-15", ",", "\n", true, 1, 0, limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						row14 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row14 = new row14Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row14.Region = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row14.Country = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							row14.Item_Type = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 3;

							row14.Sales_Channel = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Order_Priority = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Priority", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Order_Priority = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 5;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Order_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_Date", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Order_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 6;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Order_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Order_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 7;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Ship_Date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Ship_Date", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Ship_Date = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 8;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Units_Sold = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Units_Sold", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Units_Sold = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 9;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Unit_Price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Price", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Unit_Price = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 10;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row14.Unit_Cost = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
											ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unit_Cost", "row14", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row14.Unit_Cost = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 11;

							row14.Name = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 12;

							row14.Unique_Code = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tSortRow_4_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_4";

							currentComponent = "tSortRow_4_SortOut";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row14"

								);
							}

							Comparablerow14Struct arrayRowtSortRow_4_SortOut = new Comparablerow14Struct();

							arrayRowtSortRow_4_SortOut.Region = row14.Region;
							arrayRowtSortRow_4_SortOut.Country = row14.Country;
							arrayRowtSortRow_4_SortOut.Item_Type = row14.Item_Type;
							arrayRowtSortRow_4_SortOut.Sales_Channel = row14.Sales_Channel;
							arrayRowtSortRow_4_SortOut.Order_Priority = row14.Order_Priority;
							arrayRowtSortRow_4_SortOut.Order_Date = row14.Order_Date;
							arrayRowtSortRow_4_SortOut.Order_ID = row14.Order_ID;
							arrayRowtSortRow_4_SortOut.Ship_Date = row14.Ship_Date;
							arrayRowtSortRow_4_SortOut.Units_Sold = row14.Units_Sold;
							arrayRowtSortRow_4_SortOut.Unit_Price = row14.Unit_Price;
							arrayRowtSortRow_4_SortOut.Unit_Cost = row14.Unit_Cost;
							arrayRowtSortRow_4_SortOut.Name = row14.Name;
							arrayRowtSortRow_4_SortOut.Unique_Code = row14.Unique_Code;
							list_tSortRow_4_SortOut.add(arrayRowtSortRow_4_SortOut);

							tos_count_tSortRow_4_SortOut++;

							/**
							 * [tSortRow_4_SortOut main ] stop
							 */

							/**
							 * [tSortRow_4_SortOut process_data_begin ] start
							 */

							currentVirtualComponent = "tSortRow_4";

							currentComponent = "tSortRow_4_SortOut";

							/**
							 * [tSortRow_4_SortOut process_data_begin ] stop
							 */

							/**
							 * [tSortRow_4_SortOut process_data_end ] start
							 */

							currentVirtualComponent = "tSortRow_4";

							currentComponent = "tSortRow_4_SortOut";

							/**
							 * [tSortRow_4_SortOut process_data_end ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) (context.tempFile) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				row14Struct[] array_tSortRow_4_SortOut = list_tSortRow_4_SortOut.toArray(new Comparablerow14Struct[0]);

				java.util.Arrays.sort(array_tSortRow_4_SortOut);

				globalMap.put("tSortRow_4", array_tSortRow_4_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tSortRow_4_SortOut", true);
				end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("FilteredSales");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("FilteredSales");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals(("FilteredSales"))
								&& (schema_tDBOutput_1.equals(dbschema_tDBOutput_1)
										|| ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0)
												&& defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"Region\" VARCHAR(50)  ,\"Country\" VARCHAR(50)  ,\"Item_Type\" VARCHAR(20)  ,\"Sales_Channel\" VARCHAR(15)  ,\"Order_Priority\" CHAR(1)  ,\"Order_Date\" TIMESTAMP(20)  ,\"Order_ID\" INT4 ,\"Ship_Date\" TIMESTAMP(20)  ,\"Units_Sold\" INT4 ,\"Unit_Price\" FLOAT4 ,\"Unit_Cost\" FLOAT4 ,\"Name\" VARCHAR(50)  ,\"Unique_Code\" VARCHAR(50)  )");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"Region\",\"Country\",\"Item_Type\",\"Sales_Channel\",\"Order_Priority\",\"Order_Date\",\"Order_ID\",\"Ship_Date\",\"Units_Sold\",\"Unit_Price\",\"Unit_Cost\",\"Name\",\"Unique_Code\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tSortRow_4_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortIn", false);
				start_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortIn";

				int tos_count_tSortRow_4_SortIn = 0;

				row14Struct[] array_tSortRow_4_SortIn = (row14Struct[]) globalMap.remove("tSortRow_4");

				int nb_line_tSortRow_4_SortIn = 0;

				row14Struct current_tSortRow_4_SortIn = null;

				for (int i_tSortRow_4_SortIn = 0; i_tSortRow_4_SortIn < array_tSortRow_4_SortIn.length; i_tSortRow_4_SortIn++) {
					current_tSortRow_4_SortIn = array_tSortRow_4_SortIn[i_tSortRow_4_SortIn];
					row15.Region = current_tSortRow_4_SortIn.Region;
					row15.Country = current_tSortRow_4_SortIn.Country;
					row15.Item_Type = current_tSortRow_4_SortIn.Item_Type;
					row15.Sales_Channel = current_tSortRow_4_SortIn.Sales_Channel;
					row15.Order_Priority = current_tSortRow_4_SortIn.Order_Priority;
					row15.Order_Date = current_tSortRow_4_SortIn.Order_Date;
					row15.Order_ID = current_tSortRow_4_SortIn.Order_ID;
					row15.Ship_Date = current_tSortRow_4_SortIn.Ship_Date;
					row15.Units_Sold = current_tSortRow_4_SortIn.Units_Sold;
					row15.Unit_Price = current_tSortRow_4_SortIn.Unit_Price;
					row15.Unit_Cost = current_tSortRow_4_SortIn.Unit_Cost;
					row15.Name = current_tSortRow_4_SortIn.Name;
					row15.Unique_Code = current_tSortRow_4_SortIn.Unique_Code;
					// increase number of line sorted
					nb_line_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_4_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					tos_count_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn main ] stop
					 */

					/**
					 * [tSortRow_4_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					/**
					 * [tSortRow_4_SortIn process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row15"

						);
					}

					whetherReject_tDBOutput_1 = false;
					if (row15.Region == null) {
						pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(1, row15.Region);
					}

					if (row15.Country == null) {
						pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(2, row15.Country);
					}

					if (row15.Item_Type == null) {
						pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(3, row15.Item_Type);
					}

					if (row15.Sales_Channel == null) {
						pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(4, row15.Sales_Channel);
					}

					if (row15.Order_Priority == null) {
						pstmt_tDBOutput_1.setNull(5, java.sql.Types.CHAR);
					} else {
						if (row15.Order_Priority == null) {
							pstmt_tDBOutput_1.setNull(5, java.sql.Types.CHAR);
						} else if (row15.Order_Priority == ' ') {
							pstmt_tDBOutput_1.setString(5, "");
						} else {
							pstmt_tDBOutput_1.setString(5, String.valueOf(row15.Order_Priority));
						}
					}

					if (row15.Order_Date != null) {
						pstmt_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(row15.Order_Date.getTime()));
					} else {
						pstmt_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
					}

					if (row15.Order_ID == null) {
						pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tDBOutput_1.setInt(7, row15.Order_ID);
					}

					if (row15.Ship_Date != null) {
						pstmt_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(row15.Ship_Date.getTime()));
					} else {
						pstmt_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
					}

					if (row15.Units_Sold == null) {
						pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
					} else {
						pstmt_tDBOutput_1.setInt(9, row15.Units_Sold);
					}

					if (row15.Unit_Price == null) {
						pstmt_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
					} else {
						pstmt_tDBOutput_1.setFloat(10, row15.Unit_Price);
					}

					if (row15.Unit_Cost == null) {
						pstmt_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
					} else {
						pstmt_tDBOutput_1.setFloat(11, row15.Unit_Cost);
					}

					if (row15.Name == null) {
						pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(12, row15.Name);
					}

					if (row15.Unique_Code == null) {
						pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(13, row15.Unique_Code);
					}

					pstmt_tDBOutput_1.addBatch();
					nb_line_tDBOutput_1++;

					batchSizeCounter_tDBOutput_1++;

					if (!whetherReject_tDBOutput_1) {
					}
					if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
						try {
							int countSum_tDBOutput_1 = 0;

							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

							batchSizeCounter_tDBOutput_1 = 0;
						} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
							globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
							java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
									sqle_tDBOutput_1 = null;
							String errormessage_tDBOutput_1;
							if (ne_tDBOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tDBOutput_1 = new java.sql.SQLException(
										e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
										ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
								errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
							} else {
								errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
							}

							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

							System.err.println(errormessage_tDBOutput_1);

						}
					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_4_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					/**
					 * [tSortRow_4_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_4_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

				}

				globalMap.put("tSortRow_4_SortIn_NB_LINE", nb_line_tSortRow_4_SortIn);

				ok_Hash.put("tSortRow_4_SortIn", true);
				end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortIn end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_4_SortIn"
			globalMap.remove("tSortRow_4");

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tSortRow_4_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				/**
				 * [tSortRow_4_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_4_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortIn";

				/**
				 * [tSortRow_4_SortIn finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MAIN_ASSIGNMENT_test = new byte[0];
		static byte[] commonByteArray_MAIN_ASSIGNMENT_test = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAIN_ASSIGNMENT_test.length) {
					if (length < 1024 && commonByteArray_MAIN_ASSIGNMENT_test.length == 0) {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[1024];
					} else {
						commonByteArray_MAIN_ASSIGNMENT_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MAIN_ASSIGNMENT_test, 0, length);
				strReturn = new String(commonByteArray_MAIN_ASSIGNMENT_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MAIN_ASSIGNMENT_test) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/labyadav/Desktop/HU IE/Week4/ETL Main Assignment/config.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/labyadav/Desktop/HU IE/Week4/ETL Main Assignment/config.csv", "ISO-8859-15",
								",", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							//////////////////////////
							String tmp_key_tContextLoad_1 = null;
							String key_tContextLoad_1 = null;
							if (row1.key != null) {
								tmp_key_tContextLoad_1 = row1.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#")
										|| tmp_key_tContextLoad_1.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row1.key = tmp_key_tContextLoad_1;
								}
							}
							if (row1.key != null) {
								key_tContextLoad_1 = row1.key;
							}
							String value_tContextLoad_1 = null;
							if (row1.value != null) {
								value_tContextLoad_1 = row1.value;
							}

							String currentValue_tContextLoad_1 = value_tContextLoad_1;

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null && "inputFile1".equals(key_tContextLoad_1)) {
										context.inputFile1 = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "inputFile2".equals(key_tContextLoad_1)) {
										context.inputFile2 = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "salesRejectedData".equals(key_tContextLoad_1)) {
										context.salesRejectedData = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "salesFilteredData".equals(key_tContextLoad_1)) {
										context.salesFilteredData = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "joinFilteredData".equals(key_tContextLoad_1)) {
										context.joinFilteredData = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "orderPriority_ML".equals(key_tContextLoad_1)) {
										context.orderPriority_ML = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "orderPriority_HC".equals(key_tContextLoad_1)) {
										context.orderPriority_HC = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "tempFile".equals(key_tContextLoad_1)) {
										context.tempFile = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "filteredReject".equals(key_tContextLoad_1)) {
										context.filteredReject = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "lookupRejectFile".equals(key_tContextLoad_1)) {
										context.lookupRejectFile = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
									}
									if (value_tContextLoad_1 == null) {
										context.setProperty(key_tContextLoad_1, "");
									} else {
										context.setProperty(key_tContextLoad_1, value_tContextLoad_1);
									}
								} catch (java.lang.Exception e) {
									globalMap.put("tContextLoad_1_ERROR_MESSAGE", e.getMessage());
									System.err.println("Setting a value for the key \"" + key_tContextLoad_1
											+ "\" has failed. Error message: " + e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							//////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

							/**
							 * [tContextLoad_1 process_data_begin ] start
							 */

							currentComponent = "tContextLoad_1";

							/**
							 * [tContextLoad_1 process_data_begin ] stop
							 */

							/**
							 * [tContextLoad_1 process_data_end ] start
							 */

							currentComponent = "tContextLoad_1";

							/**
							 * [tContextLoad_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/labyadav/Desktop/HU IE/Week4/ETL Main Assignment/config.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1,
						newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1,
						noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "", "", "",
						"", resumeUtil.convertToJsonText(context, parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final test testClass = new test();

		int exitCode = testClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = test.class.getClassLoader()
					.getResourceAsStream("main_assignment/test_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = test.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("inputFile1", "id_File");
					if (context.getStringValue("inputFile1") == null) {
						context.inputFile1 = null;
					} else {
						context.inputFile1 = (String) context.getProperty("inputFile1");
					}
					context.setContextType("inputFile2", "id_File");
					if (context.getStringValue("inputFile2") == null) {
						context.inputFile2 = null;
					} else {
						context.inputFile2 = (String) context.getProperty("inputFile2");
					}
					context.setContextType("salesRejectedData", "id_File");
					if (context.getStringValue("salesRejectedData") == null) {
						context.salesRejectedData = null;
					} else {
						context.salesRejectedData = (String) context.getProperty("salesRejectedData");
					}
					context.setContextType("salesFilteredData", "id_File");
					if (context.getStringValue("salesFilteredData") == null) {
						context.salesFilteredData = null;
					} else {
						context.salesFilteredData = (String) context.getProperty("salesFilteredData");
					}
					context.setContextType("joinFilteredData", "id_File");
					if (context.getStringValue("joinFilteredData") == null) {
						context.joinFilteredData = null;
					} else {
						context.joinFilteredData = (String) context.getProperty("joinFilteredData");
					}
					context.setContextType("orderPriority_ML", "id_File");
					if (context.getStringValue("orderPriority_ML") == null) {
						context.orderPriority_ML = null;
					} else {
						context.orderPriority_ML = (String) context.getProperty("orderPriority_ML");
					}
					context.setContextType("orderPriority_HC", "id_File");
					if (context.getStringValue("orderPriority_HC") == null) {
						context.orderPriority_HC = null;
					} else {
						context.orderPriority_HC = (String) context.getProperty("orderPriority_HC");
					}
					context.setContextType("tempFile", "id_File");
					if (context.getStringValue("tempFile") == null) {
						context.tempFile = null;
					} else {
						context.tempFile = (String) context.getProperty("tempFile");
					}
					context.setContextType("filteredReject", "id_File");
					if (context.getStringValue("filteredReject") == null) {
						context.filteredReject = null;
					} else {
						context.filteredReject = (String) context.getProperty("filteredReject");
					}
					context.setContextType("lookupRejectFile", "id_File");
					if (context.getStringValue("lookupRejectFile") == null) {
						context.lookupRejectFile = null;
					} else {
						context.lookupRejectFile = (String) context.getProperty("lookupRejectFile");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("inputFile1")) {
				context.inputFile1 = (String) parentContextMap.get("inputFile1");
			}
			if (parentContextMap.containsKey("inputFile2")) {
				context.inputFile2 = (String) parentContextMap.get("inputFile2");
			}
			if (parentContextMap.containsKey("salesRejectedData")) {
				context.salesRejectedData = (String) parentContextMap.get("salesRejectedData");
			}
			if (parentContextMap.containsKey("salesFilteredData")) {
				context.salesFilteredData = (String) parentContextMap.get("salesFilteredData");
			}
			if (parentContextMap.containsKey("joinFilteredData")) {
				context.joinFilteredData = (String) parentContextMap.get("joinFilteredData");
			}
			if (parentContextMap.containsKey("orderPriority_ML")) {
				context.orderPriority_ML = (String) parentContextMap.get("orderPriority_ML");
			}
			if (parentContextMap.containsKey("orderPriority_HC")) {
				context.orderPriority_HC = (String) parentContextMap.get("orderPriority_HC");
			}
			if (parentContextMap.containsKey("tempFile")) {
				context.tempFile = (String) parentContextMap.get("tempFile");
			}
			if (parentContextMap.containsKey("filteredReject")) {
				context.filteredReject = (String) parentContextMap.get("filteredReject");
			}
			if (parentContextMap.containsKey("lookupRejectFile")) {
				context.lookupRejectFile = (String) parentContextMap.get("lookupRejectFile");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_4) {
			globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : test");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 881927 characters generated by Talend Open Studio for Data Integration on the
 * May 27, 2022 at 5:11:55 AM IST
 ************************************************************************************************/